# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Coverage Report

on:
  workflow_run:
    workflows: ["Lint and Test"]
    types:
      - completed
    branches:
      - main
      - "pull-request/[0-9]+"

permissions:
  contents: read         # Required for checking out code
  actions: write         # Required for downloading artifacts
  pull-requests: write   # Required for coverage report comments

env:
  # Go cache settings (specific to this workflow)
  GOPATH: /home/runner/go
  GOCACHE: /home/runner/.cache/go-build

jobs:
  coverage-report:
    # Only run on successful completion of lint-test workflow for PR branches
    if: github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.event == 'pull_request' || startsWith(github.event.workflow_run.head_branch, 'pull-request/'))
    runs-on: linux-amd64-cpu4
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download all coverage artifacts from completed workflow
        uses: actions/download-artifact@v4
        with:
          pattern: "*-results"
          path: coverage-artifacts
          merge-multiple: true
          run-id: ${{ github.event.workflow_run.id }}

      - name: Consolidate coverage files
        run: |
          echo "Consolidating coverage files from all components..."
          mkdir -p consolidated-coverage

          # Find all coverage.txt files and merge them
          find coverage-artifacts -name "coverage.txt" -type f | while read -r file; do
            echo "Processing: $file"
            # Extract the mode line (first line) if it's the first file
            if [ ! -f consolidated-coverage/coverage.txt ]; then
              head -n 1 "$file" > consolidated-coverage/coverage.txt
            fi
            # Append coverage data (skip mode line)
            tail -n +2 "$file" >> consolidated-coverage/coverage.txt
          done

          echo "Consolidated coverage file created:"
          ls -la consolidated-coverage/
          head -n 10 consolidated-coverage/coverage.txt

      - name: Upload consolidated coverage
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-code-coverage
          path: consolidated-coverage/coverage.txt
          retention-days: 30

      - name: Extract PR number from branch name
        id: pr-number
        run: |
          if [[ "${{ github.event.workflow_run.head_branch }}" =~ pull-request/([0-9]+) ]]; then
            echo "pr_number=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install go-coverage-report CLI tool
        run: go install github.com/fgrosse/go-coverage-report/cmd/go-coverage-report@v1.2.0

      - name: Get changed files
        uses: tj-actions/changed-files@aa08304bd477b800d468db44fe10f6c61f7f7b11
        id: changed-files
        with:
          write_output_files: true
          json: true
          files: "**.go"
          files_ignore: "vendor/**"
          output_dir: .github/outputs

      - name: Generate Coverage Report with Fixed PR Number
        run: |
          set -e  # Exit on error

          # Download current coverage from the completed workflow
          echo "Downloading current coverage from run ${{ github.event.workflow_run.id }}..."
          if ! gh run download "${{ github.event.workflow_run.id }}" --name=consolidated-code-coverage --dir=/tmp/current-coverage; then
            echo "❌ Failed to download current coverage artifacts"
            exit 1
          fi

          if [[ ! -f /tmp/current-coverage/coverage.txt ]]; then
            echo "❌ Current coverage file not found"
            exit 1
          fi

          mv /tmp/current-coverage/coverage.txt .github/outputs/new-coverage.txt

          # Download baseline coverage from main (failure here is acceptable)
          echo "Downloading baseline coverage..."
          LAST_SUCCESSFUL_RUN=$(gh run list --status=success --branch=main --workflow=lint-test.yml --event=push --json=databaseId --limit=1 -q '.[] | .databaseId')

          if [[ -n "$LAST_SUCCESSFUL_RUN" ]]; then
            echo "Found baseline run: $LAST_SUCCESSFUL_RUN"
            if gh run download "$LAST_SUCCESSFUL_RUN" --name=consolidated-code-coverage --dir=/tmp/baseline-coverage 2>/dev/null; then
              if [[ -f /tmp/baseline-coverage/coverage.txt ]]; then
                echo "✅ Baseline coverage found"
                mv /tmp/baseline-coverage/coverage.txt .github/outputs/old-coverage.txt
              else
                echo "⚠️  Baseline coverage file not found in artifact"
                touch .github/outputs/old-coverage.txt  # Create empty file
              fi
            else
              echo "⚠️  Failed to download baseline coverage (creating empty baseline)"
              touch .github/outputs/old-coverage.txt  # Create empty file
            fi
          else
            echo "⚠️  No successful baseline run found (creating empty baseline)"
            touch .github/outputs/old-coverage.txt  # Create empty file
          fi

          # Generate the report using fgrosse's CLI tool (same format!)
          echo "Generating coverage report..."
          if ! go-coverage-report -root=github.com/NVIDIA/nvsentinel \
            .github/outputs/old-coverage.txt \
            .github/outputs/new-coverage.txt \
            .github/outputs/all_modified_files.json > coverage-report.md 2>&1; then
            echo "❌ Failed to generate coverage report"
            echo "Coverage report output:"
            cat coverage-report.md || echo "No output file"
            exit 1
          fi

          if [[ ! -f coverage-report.md || ! -s coverage-report.md ]]; then
            echo "❌ Coverage report is empty or missing"
            exit 1
          fi

          echo "✅ Coverage report generated successfully"

          # Post comment using our correct PR number
          if [[ -n "${{ steps.pr-number.outputs.pr_number }}" ]]; then
            echo "Posting coverage comment to PR #${{ steps.pr-number.outputs.pr_number }}..."

            # Check for existing coverage comment
            EXISTING_COMMENT=$(gh api "repos/${{ github.repository }}/issues/${{ steps.pr-number.outputs.pr_number }}/comments" \
              --jq '.[] | select(.user.login=="github-actions[bot]" and (.body | test("Coverage Report|Coverage Δ"))) | .id' \
              | head -1 2>/dev/null || echo "")

            if [[ -n "$EXISTING_COMMENT" ]]; then
              echo "Updating existing comment $EXISTING_COMMENT..."
              if ! gh api "repos/${{ github.repository }}/issues/${{ steps.pr-number.outputs.pr_number }}/comments/$EXISTING_COMMENT" \
                --method PATCH --input coverage-report.md; then
                echo "❌ Failed to update existing coverage comment"
                exit 1
              fi
            else
              echo "Creating new comment..."
              if ! gh pr comment "${{ steps.pr-number.outputs.pr_number }}" --body-file=coverage-report.md; then
                echo "❌ Failed to create coverage comment"
                exit 1
              fi
            fi

            echo "✅ Coverage comment posted successfully"
          else
            echo "⚠️  No PR number found, skipping comment"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  coverage-baseline:
    # Only run on successful completion of lint-test workflow for main branch
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' && github.event.workflow_run.event == 'push'
    runs-on: linux-amd64-cpu4
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Download all coverage artifacts from completed workflow
        uses: actions/download-artifact@v4
        with:
          pattern: "*-results"
          path: coverage-artifacts
          merge-multiple: true
          run-id: ${{ github.event.workflow_run.id }}

      - name: Consolidate coverage files
        run: |
          echo "Consolidating coverage files from all components for baseline..."
          mkdir -p consolidated-coverage

          # Find all coverage.txt files and merge them
          find coverage-artifacts -name "coverage.txt" -type f | while read -r file; do
            echo "Processing: $file"
            # Extract the mode line (first line) if it's the first file
            if [ ! -f consolidated-coverage/coverage.txt ]; then
              head -n 1 "$file" > consolidated-coverage/coverage.txt
            fi
            # Append coverage data (skip mode line)
            tail -n +2 "$file" >> consolidated-coverage/coverage.txt
          done

          echo "Baseline coverage file created:"
          ls -la consolidated-coverage/
          echo "Total coverage lines: $(wc -l < consolidated-coverage/coverage.txt)"

      - name: Upload consolidated coverage baseline
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-code-coverage
          path: consolidated-coverage/coverage.txt
          retention-days: 90  # Keep baseline longer