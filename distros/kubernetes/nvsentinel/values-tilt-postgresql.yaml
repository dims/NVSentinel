# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# SECURITY NOTE: This configuration uses certificate-based authentication for PostgreSQL.
#
# Authentication method:
#   - PostgreSQL server uses TLS certificates generated by cert-manager
#   - Applications authenticate using client certificates
#   - No passwords are required or used for database connections
#
# Certificates are automatically generated and managed by cert-manager.

global:
  dryRun: false
  kubeVersion: 1.31.0
  clusterType: standalone  # Required for cert-manager resources

  # Configure PostgreSQL as the datastore provider
  datastore:
    provider: "postgresql"
    connection:
      host: "nvsentinel-postgresql.nvsentinel.svc.cluster.local"
      port: 5432
      database: "nvsentinel"
      username: "postgresql"
      sslmode: "require"
      sslcert: "/etc/ssl/client-certs/tls.crt"
      sslkey: "/etc/ssl/client-certs/tls.key"
      sslrootcert: "/etc/ssl/client-certs/ca.crt"
    options:
      maxConnections: "25"
      maxIdleConnections: "10"
      connectionMaxLifetime: "1h"
      pollInterval: "5s"

  nodeSelector: {}
  
  tolerations: 
  - operator: Exists
  
  affinity: {}
  
  podAnnotations: {}
  
  systemNodeSelector:
    node-role.kubernetes.io/control-plane: ""
  
  systemNodeTolerations:
  - operator: Exists

  gpuHealthMonitor:
    enabled: true

  healthEventsAnalyzer:
    enabled: false

  faultQuarantineModule:
    enabled: true

  nodeDrainerModule:
    enabled: true

  faultRemediationModule:
    enabled: true

  dcaHealthMonitor:
    enabled: false

  cspHealthMonitor:
    enabled: false

  syslogHealthMonitor:
    enabled: true
    xidSideCar:
      enabled: false

  inclusterFileServer:
    enabled: false

  # PostgreSQL equivalent of mongodbStore configuration
  postgresqlStore:
    images:
      kubectl:
        repository: docker.io/bitnamilegacy/kubectl
        tag: "1.30.6"
        pullPolicy: IfNotPresent

  kata:
    enabled: false
  
  janitor:
    enabled: true

platformConnector:
  # Disable MongoDB store
  mongodbStore:
    enabled: false

  # Enable PostgreSQL store
  postgresqlStore:
    enabled: true
    clientCertMountPath: "/etc/ssl/client-certs"

# Disable MongoDB components
mongodb-store:
  mongodb:
    enabled: false

# Enable PostgreSQL with development-friendly configuration
postgresql:
  enabled: true

  # Global image configuration for all containers including init containers
  global:
    imageRegistry: "docker.io"
    imagePullSecrets: []

  # Configure TLS init container explicitly
  tls:
    image:
      registry: "docker.io"
      repository: "bitnamilegacy/os-shell"
      tag: "12-debian-12-r30"
      pullPolicy: "IfNotPresent"
      pullSecrets:
        - nvidia-ngcuser-pull-secret

  # Development-friendly configuration
  architecture: standalone
  replicaCount: 1

  nodeSelector:
    node-role.kubernetes.io/control-plane: ""

  tolerations:
  - operator: Exists

  image:
    registry: "docker.io"
    repository: "bitnamilegacy/postgresql"
    tag: "16.4.0-debian-12-r11"
    pullPolicy: "IfNotPresent"
    pullSecrets:
      - nvidia-ngcuser-pull-secret

  # Reduced resource requirements for local development
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

  # PostgreSQL-specific configuration with certificate authentication
  auth:
    postgresPassword: "unused"  # Not used with certificate auth
    username: "postgresql"
    database: "nvsentinel"

  primary:
    persistence:
      enabled: true
      size: "8Gi"
      storageClass: ""

  # Enable metrics (matching MongoDB configuration)
  metrics:
    enabled: true
    image:
      registry: docker.io
      repository: bitnamilegacy/postgres-exporter
      tag: 0.15.0-debian-12-r31

  tls:
    enabled: true
    autoGenerated: false
    certificatesSecret: "postgresql-server-cert"
    certFilename: "tls.crt"
    certKeyFilename: "tls.key"
    certCAFilename: "ca.crt"

# Override log levels for all modules during testing
fault-quarantine:
  logLevel: debug
  clientCertMountPath: "/etc/ssl/client-certs"

fault-remediation:
  logLevel: debug
  clientCertMountPath: "/etc/ssl/client-certs"

node-drainer:
  logLevel: debug
  clientCertMountPath: "/etc/ssl/client-certs"

labeler:
  logLevel: debug

health-events-analyzer:
  logLevel: debug
  clientCertMountPath: "/etc/ssl/client-certs"

csp-health-monitor:
  logLevel: debug
  clientCertMountPath: "/etc/ssl/client-certs"
  quarantineTriggerEngine:
    logLevel: debug
